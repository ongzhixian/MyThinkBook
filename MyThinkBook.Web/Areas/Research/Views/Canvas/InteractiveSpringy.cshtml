@{
    ViewData["Title"] = "Research";
    Layout = "_CanvasLayout";
}

<div class="bi-panel-layout">
    <div class="left-panel">
        <canvas id="canvas"></canvas>
    </div>
    <div class="right-panel">

        <form style="margin:1em;">
            @*
            <div class="row">
            <div class="six columns">
            <label for="exampleEmailInput">Your email</label>
            <input class="u-full-width" type="email" placeholder="test@mailbox.com" id="exampleEmailInput">
            </div>
            <div class="six columns">
            <label for="exampleRecipientInput">Reason for contacting</label>
            <select class="u-full-width" id="exampleRecipientInput">
            <option value="Option 1">Questions</option>
            <option value="Option 2">Admiration</option>
            <option value="Option 3">Can I get your number?</option>
            </select>
            </div>
            </div>
            *@

            <label for="graphData">Data</label>
            <textarea class="u-full-width" id="graphData" rows="20" spellcheck="false">
#nodes
monty
bianca;{'color': '#00A0B0'}

#edges
bianca->monty</textarea>
            <button class="button-primary" type="button" id="updateButton">Update</button>
        </form>

        <div style="margin:1em;"></div>

    </div>

</div>


@section Scripts {
    @*<script src="~/js/fxTrading.js"></script>*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
    <script src="/js/springy/springy.js"></script>
    <script src="/js/springy/springyui.js"></script>
    <script type="text/javascript">
        "use strict";

        const graphDataTextArea = document.getElementById('graphData');
        //let graph = new Springy.Graph();
        let springy = null;

        function addNode(command, graph) {

            let match = /(?<id>[^;]+)(?=;?(?<dataJson>.+)?)/gm.exec(command);

            if (match == null) {
                return;
            }

            let label = match.groups['id'].trim();

            let jsonData = match.groups['dataJson'] ? JSON.parse(match.groups['dataJson'].trim().replaceAll("'", "\"")) : undefined;

            return graph.addNode(new Springy.Node(label, jsonData));
        }

        function addEdge(command, graph) {

            let match = /(?<srcId>.+)->(?<tgtId>[^;]+)(?=;?(?<jsonData>.+)?)/gm.exec(command);

            if (match == null) {
                return;
            }

            let srcId = match.groups['srcId'].trim();
            let tgtId  = match.groups['tgtId'].trim();

            //if ()
            let srcNode = graph.nodeSet[srcId];
            if (!srcNode) {
                srcNode = graph.addNode(new Springy.Node(srcId))
            }

            let tgtNode = graph.nodeSet[tgtId];
            if (!tgtNode) {
                tgtNode = graph.addNode(new Springy.Node(tgtId))
            }

            let jsonData = match.groups['dataJson'] ? JSON.parse(match.groups['dataJson'].trim().replaceAll("'", "\"")) : undefined;

            graph.newEdge(srcNode, tgtNode, jsonData);
        }

        function redraw() {

            clearSpringyGraph();

            let graph = springy.graph;

            let lines = graphDataTextArea.value.split('\n');
            
            let mode = "";

            lines.forEach((line, idx, arr) => {
            
                let command = line.trim();

                console.debug("Command:", command);
                
                if (command.startsWith("#")) {
                    mode = command;
                    return;
                }

                if (mode == "#nodes") {
                    addNode(command, graph);
                    return;
                }

                if (mode == "#edges") {
                    addEdge(command, graph);
                    return;
                }
            });

        }

        function clearSpringyGraph() {
            let simpleNodes = springy.graph.nodes.map((item, idx, arr) => {
                return {
                    id: item.id
                };
            });

            simpleNodes.forEach((item, idx, arr) => {
                springy.graph.removeNode(item);
            });
        }


        function drawStuff() {

            // do your drawing stuff here
            var graph = new Springy.Graph();
            //graph.addNodes('Dennis', 'Michael', 'Jessica', 'Timothy', 'Barbara')
            graph.addNodes('Amphitryon', 'Alcmene', 'Iphicles', 'Heracles');

            //var dennis = graph.newNode({
            //    label: 'Dennis',
            //    ondoubleclick: function () { console.log("Hello!"); }
            //});

            //var bianca = graph.newNode({ label: 'Bianca', color: '#00A0B0' });
            //var monty = graph.newNode({ label: 'Monty' });

            //graph.newEdge(bianca, monty, { color: '#EB6841' });

            graph.addEdges(
                //['Dennis', 'Michael', { color: '#00A0B0', label: 'Foo bar' }],
                //['Michael', 'Dennis', { color: '#6A4A3C' }],
                //['Michael', 'Jessica', { color: '#CC333F' }],
                //['Jessica', 'Barbara', { color: '#EB6841' }],
                //['Michael', 'Timothy', { color: '#EDC951' }],
                //['Barbara', 'Timothy', { color: '#6A4A3C' }],

                ['Amphitryon', 'Alcmene', { color: '#7DBE3C' }],
                ['Alcmene', 'Amphitryon', { color: '#BE7D3C' }],
                ['Amphitryon', 'Iphicles'],
                ['Amphitryon', 'Heracles'],

            );

            if (springy == null) {
                springy = jQuery('#canvas').springy({
                    graph: graph
                });
            } else {
                springy.graph = graph;
            }

            //jQuery(function () {
            //    var springy = jQuery('#canvas').springy({
            //        graph: graph
            //    });
            //    debugger;
            //});
        }

        function resizeCanvas() {
            //canvas.width = window.innerWidth;
            //canvas.height = window.innerHeight;
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;

            drawStuff();
        }

        (function () {
            const updateButton = document.getElementById('updateButton');
            const canvas = document.getElementById('canvas');
            const context = canvas.getContext('2d');

            window.addEventListener('resize', resizeCanvas, false);
            updateButton.addEventListener('click', redraw, false);

            resizeCanvas();
        })();
    </script>
}