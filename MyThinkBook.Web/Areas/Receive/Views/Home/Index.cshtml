@using MyThinkBook.Web.Areas.Receive.Models;
@model ReceiveFormViewModel
@{
    ViewData["Title"] = "Receive";
    int entryIndex;
}

@await Html.PartialAsync("_WmsTopNavBar")

<div class="section no-pad-bot" id="index-banner">
    <div class="container">
        <br><br>
        <h1 class="header center orange-text">Receive</h1>

        <div class="row">
            <form class="col s12" id="receiveForm" method="post" onsubmit="return validateForm(this);">

                @for (entryIndex = 0; entryIndex < Model.ReceiveEntries.Count; entryIndex++)
                {
                    <div class="row item-input-row">

                        <div class="input-field col s5">
                            <i class="material-icons prefix">textsms</i>
                            <input asp-for="ReceiveEntries[entryIndex].Name" class="autocomplete item-name" required="" aria-required="true" />
                            <label asp-for="ReceiveEntries[entryIndex].Name"></label>
                        </div>

                        <div class="input-field col s2">
                            <input asp-for="ReceiveEntries[entryIndex].Quantity" class="validate item-quantity" required="" aria-required="true" data-validator="decimal" />
                            <label asp-for="ReceiveEntries[entryIndex].Quantity">Quantity</label>
                        </div>

                        <div class="input-field col s2">
                            <select asp-for="ReceiveEntries[entryIndex].Unit" asp-items="Model.UnitOfMeasureList" class="item-unit"></select>
                            <label asp-for="ReceiveEntries[entryIndex].Unit">Unit of Measure</label>
                        </div>

                        <div class="input-field col s3">
                            <button class="btn waves-effect waves-light" type="button" name="action" title="Add entry" tabindex="-1" onclick="addInputRow(true);">
                                <i class="material-icons">playlist_add</i>
                            </button>
                            <button class="btn waves-effect waves-light" type="button" name="action" title="Copy entry" tabindex="-1" onclick="addInputRow(false);">
                                <i class="material-icons">content_copy</i>
                            </button>
                            <button class="btn waves-effect waves-light" type="button" name="action" title="Remove entry" tabindex="-1" onclick="deleteInputRow(this);">
                                <i class="material-icons">delete</i>
                            </button>
                        </div>
                    </div>
                }

                <button class="btn waves-effect waves-light" type="submit" id="submitButton">
                    Submit  <i class="material-icons right">send</i>
                </button>

                <input type="hidden" value="@(entryIndex)" id="entryIndex" />
                <input type="hidden" value="@Model.ReceiveEntries" id="model" />

            </form>
        </div>


        <div class="row center">
            <h5 class="header col s12 light">An receive module built on ASP.NET Core using Material Design.</h5>
        </div>
        <div class="row center">
            <a href="javascript:void(0);" id="download-button" class="btn-large waves-effect waves-light orange">Get Started</a>
        </div>
        <br><br>

    </div>
</div>


<div class="container">
    <div class="section">

        <!--   Icon Section   -->
        <div class="row">
            <div class="col s12 m4">
                <div class="icon-block">
                    <h2 class="center light-blue-text"><i class="material-icons">flash_on</i></h2>
                    <h5 class="center">Speeds up development</h5>

                    <p class="light">We did most of the heavy lifting for you to provide a default stylings that incorporate our custom components. Additionally, we refined animations and transitions to provide a smoother experience for developers.</p>
                </div>
            </div>

            <div class="col s12 m4">
                <div class="icon-block">
                    <h2 class="center light-blue-text"><i class="material-icons">group</i></h2>
                    <h5 class="center">User Experience Focused</h5>

                    <p class="light">By utilizing elements and principles of Material Design, we were able to create a framework that incorporates components and animations that provide more feedback to users. Additionally, a single underlying responsive system across all platforms allow for a more unified user experience.</p>
                </div>
            </div>

            <div class="col s12 m4">
                <div class="icon-block">
                    <h2 class="center light-blue-text"><i class="material-icons">settings</i></h2>
                    <h5 class="center">Easy to work with</h5>

                    <p class="light">We have provided detailed documentation as well as specific code examples to help new users get started. We are also always open to feedback and can answer any questions a user may have about Materialize.</p>
                </div>
            </div>
        </div>

    </div>
    <br><br>
</div>

@await Html.PartialAsync("_WmsFooter")

@section Scripts {
    <script type="text/javascript">
        "use strict";

        const submitButton = document.getElementById("submitButton");
        const receiveForm = document.getElementById("receiveForm");
        const hiddenEntryIndex = document.getElementById("entryIndex");

        const nameSubstitutionRegex = /(?<model>\w+)\[(?<index>\d+)\](?<prop>.+)/gm;
        const idSubstitutionRegex = /(?<model>\w+)_(?<index>\d+)__(?<prop>.+)/gm;

        function validateForm(formElement) {

            // TODO: Check if customer is filled.

            // For each data row, check that all details are filled.

            let inputRows = formElement.querySelectorAll(".item-input-row");

            inputRows.forEach((inputRowElement, index, arr) => {

                // Ensure that all item are filled.
                let namedElements = inputRowElement.querySelectorAll("input[name], .select-dropdown.dropdown-trigger");

                namedElements.forEach((element) => {
                    element.focus();
                    element.blur();
                });
            });

            return formElement.querySelectorAll(".invalid").length === 0;
        }

        function renameFormElements(rowElement, rowIndex) {
            rowElement.querySelectorAll("input[name],select[name]").forEach((element, index, arr) => {
                let newName = element.name.replace(nameSubstitutionRegex, `$1[${rowIndex}]$3`);
                element.name = newName;
                console.log("newName", newName);
            });

            rowElement.querySelectorAll("input[id],select[id]").forEach((element, index, arr) => {
                let newId = element.id.replace(idSubstitutionRegex, `$1_${rowIndex}__$3`);
                element.id = newId;
                console.log("newId", newId);
            });

            rowElement.querySelectorAll("label[for]").forEach((element, index, arr) => {
                let newFor = element.getAttribute("for").replace(idSubstitutionRegex, `$1_${rowIndex}__$3`);
                element.setAttribute("for", newFor);
                console.log("newFor", newFor);
            });
        }

        function resequence(rowElement, rowIndex) {

            if (rowElement.id === 'submitButton') {
                return rowIndex;
            }

            renameFormElements(rowElement, rowIndex);

            return resequence(rowElement.nextElementSibling, ++rowIndex);
        }

        function deleteInputRow(buttonElement) {

            let itemInputRow = buttonElement.parentElement.parentElement;

            // If this is the last row, do nothing
            if (itemInputRow.parentElement.querySelectorAll(".item-input-row").length === 1) {
                return;
            }

            // Destroy Materialize form elements

            let existingAutoCompleteElement = itemInputRow.querySelector(".autocomplete");
            let existingSelectElement = itemInputRow.querySelector("select");

            M.Autocomplete.getInstance(existingAutoCompleteElement).destroy();
            M.FormSelect.getInstance(existingSelectElement).destroy();

            // If we delete a row that is not the last row, we need re-sequence the index.

            let inputElementName = itemInputRow.querySelector("input.autocomplete").name;

            let entryIndexId = inputElementName.replace(nameSubstitutionRegex, `$2`);

            let newIndex = resequence(itemInputRow.nextElementSibling, entryIndexId);

            itemInputRow.remove();

            // After we re-sequence index, we need to update entryIndex

            hiddenEntryIndex.value = newIndex;
        }

        function addInputRow(isBlankForm = true) {

            let itemInputRow = document.querySelector(".row.item-input-row");

            // Destroy MaterializeCss form elements first before clone; obviously we would need to restore it later

            let existingAutoCompleteElement = itemInputRow.querySelector(".autocomplete");
            let existingSelectElement = itemInputRow.querySelector("select");

            M.Autocomplete.getInstance(existingAutoCompleteElement).destroy();
            M.FormSelect.getInstance(existingSelectElement).destroy();

            let newInputRow = itemInputRow.cloneNode(true);

            // Figure out last index

            let newEntryIndex = parseInt(hiddenEntryIndex.value, 10);

            // Update id and name ; id="ReceiveEntries_0__Unit" name="ReceiveEntries[0].Unit"

            renameFormElements(newInputRow, newEntryIndex);

            if (isBlankForm) {

                // Empty all input values

                newInputRow.querySelectorAll("input[name]").forEach((element, index, arr) => {
                    element.value = '';
                });

                newInputRow.querySelectorAll("select[name]").forEach((element, index, arr) => {
                    element.selectedIndex = -1
                });
            }

            // Insert HTML into form

            receiveForm.insertBefore(newInputRow, submitButton);

            // Setup events for form elements

            var newAutoCompleteElements = document.querySelectorAll(`#ReceiveEntries_${newEntryIndex}__Name`);
            let newAutoCompleteInstances = M.Autocomplete.init(newAutoCompleteElements);

            var newSelectElements = document.querySelectorAll(`#ReceiveEntries_${newEntryIndex}__Unit`);
            let newSelectInstances = M.FormSelect.init(newSelectElements);

            // Attach validator for all input elements with name attribute
            let rowInputElements = newInputRow.querySelectorAll('.item-input-row input[name]');

            rowInputElements.forEach((element, index, array) => {
                
                let dataValidator = element.getAttribute('data-validator');

                if (dataValidator === null) {
                    attachRequiredValidation(element);
                    return;
                }

                if (dataValidator.trim() === "decimal") {
                    attachRequiredDecimalValidation(element);
                    return;
                }
            });

            // Attach validator for to select element
            newSelectInstances.forEach((element, index, array) => {
                attachRequiredValidationForMaterializeSelect(element);
            });

            // Restore original element Materialize CSS components

            M.Autocomplete.init(existingAutoCompleteElement);
            M.FormSelect.init(existingSelectElement);

            hiddenEntryIndex.value = newEntryIndex + 1;
        }

        document.addEventListener('DOMContentLoaded', function () {
            var autoCompleteElements = document.querySelectorAll('.autocomplete');
            var autoCompleteInstances = M.Autocomplete.init(autoCompleteElements);

            var selectElements = document.querySelectorAll('select');
            var selectInstances = M.FormSelect.init(selectElements);

            // Attach validator for all input elements with name attribute
            let rowInputElements = document.querySelectorAll('.item-input-row input[name]');

            rowInputElements.forEach((element, index, array) => {
                
                let dataValidator = element.getAttribute('data-validator');

                if (dataValidator === null) {
                    attachRequiredValidation(element);
                    return;
                }

                if (dataValidator.trim() === "decimal") {
                    attachRequiredDecimalValidation(element);
                    return;
                }
            });

            // Attach validator for all select elements with name attribute
            selectInstances.forEach((element, index, array) => {
                attachRequiredValidationForMaterializeSelect(element);
            });
        });

        // addInvalidCssClass -- add invalid css class if html element value equals to valueToCompare
        function adjustCssClass(htmlElement, valueToCompare) {

            if (htmlElement.value === valueToCompare) {

                if (!htmlElement.classList.contains("invalid")) {
                    htmlElement.classList.add("invalid");
                }

                return;
            }

            if (htmlElement.classList.contains("invalid")) {
                htmlElement.classList.remove("invalid");
            }
        }


        function attachRequiredValidationForMaterializeSelect(element) {

            // Get the text of the option whose value is empty string.

            let defaultOptionText = element.el.options.item("").text;

            element.dropdownOptions.childNodes.forEach((listItemElement, index, array) => {

                listItemElement.addEventListener('click', (e) => {

                    adjustCssClass(element.input, defaultOptionText);

                });
            });

            ['input', 'blur'].forEach((eventName) => {

                element.input.addEventListener(eventName, (e) => {

                    adjustCssClass(e.currentTarget, defaultOptionText);

                });
            });

        }

        function attachRequiredValidation(element) {

            ['input', 'blur'].forEach((eventName) => {

                element.addEventListener(eventName, (e) => {

                    adjustCssClass(e.currentTarget, "");

                });
            });
        }

        function attachRequiredDecimalValidation(element) {

            ['input', 'blur'].forEach((eventName) => {

                element.addEventListener(eventName, (e) => {

                    const decimalRegex = /^(\d*\.)?\d+$/gm;

                    let htmlElement = e.currentTarget;

                    debugger;

                    if (!decimalRegex.test(htmlElement.value)) {

                        if (!htmlElement.classList.contains("invalid")) {
                            htmlElement.classList.add("invalid");
                        }

                        return;
                    }

                    if (htmlElement.classList.contains("invalid")) {
                        htmlElement.classList.remove("invalid");
                    }

                });
            });
        }
    </script>
}